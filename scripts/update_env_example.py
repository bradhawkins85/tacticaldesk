"""Utility to generate the project .env.example file from Settings definitions."""
from __future__ import annotations

from pathlib import Path
import sys
from typing import List


PROJECT_ROOT = Path(__file__).resolve().parents[1]
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))

from app.core.config import Settings


HEADER = (
    "# Example environment configuration for Tactical Desk\n"
    "# This file is generated by scripts/update_env_example.py based on app.core.config.Settings.\n"
    "# Do not edit manually; update the Settings model instead.\n"
)


def _normalize_env_name(raw: str) -> str:
    if not raw:
        return raw
    normalized = raw.strip()
    if normalized.upper() == normalized:
        return normalized
    return normalized.upper()


def _iter_env_names(field) -> List[str]:
    env = field.field_info.extra.get("env")
    names: List[str] = []
    if env:
        if isinstance(env, (list, tuple, set)):
            names.extend(str(item) for item in env)
        else:
            names.append(str(env))
    else:
        env_names = field.field_info.extra.get("env_names") or {field.name}
        names.extend(str(item) for item in env_names)

    seen = set()
    result: List[str] = []
    for name in names:
        normalized = _normalize_env_name(name)
        if normalized and normalized not in seen:
            seen.add(normalized)
            result.append(normalized)
    return result


def _format_default(value) -> str:
    if value is None:
        return ""
    if isinstance(value, bool):
        return "true" if value else "false"
    return str(value)


def generate_env_example() -> str:
    lines: List[str] = [HEADER.rstrip()]

    for field in Settings.__fields__.values():
        env_names = _iter_env_names(field)
        if not env_names:
            continue
        description = field.field_info.description
        default = _format_default(field.get_default())

        if description:
            lines.append(f"\n# {description}")
        else:
            lines.append("")

        for index, env_name in enumerate(env_names):
            prefix = "# Alternative:" if index > 0 else ""
            assignment = f"{env_name}={default}" if prefix == "" else f"{env_name}={default}"
            if prefix:
                lines.append(f"{prefix} {assignment}")
            else:
                lines.append(assignment)

    lines.append("")
    return "\n".join(lines)


def write_env_example(target: Path | None = None) -> Path:
    if target is None:
        target = Path(__file__).resolve().parents[1] / ".env.example"
    content = generate_env_example()
    target.write_text(content)
    return target


if __name__ == "__main__":
    path = write_env_example()
    print(f"Wrote {path}")
